rDOCK BUILD INSTRUCTIONS

########################################################################
BACKGROUND:
########################################################################

rDock is written in C++ and makes heavy use of the C++ Standard Template Library (STL).
All source code is compiled into a single shared library (libRbt.so).
The executables are light-weight command-line applications linked with libRbt.so.

########################################################################
PREREQUISITES:
########################################################################

Make sure you have the following packages installed:

- g++		    GNU C++ compiler (or your preferred C++ compiler)
- make
- libpopt		Command-line argument processing (run-time)
- popt-devel	Command-line argument processing (compile-time)

in debian/ubuntu this can be installed by:

apt install g++ make libpopt-dev libpopt0

Optional (for testing):
- cppunit           C++ unit testing framework (port of JUnit)
- cppunit-devel     C++ unit testing framework (port of JUnit)

cppunit version must be <=1.12 as higher versions are not compatible (yet)

########################################################################
BASIC BUILD INSTRUCTIONS:
########################################################################
Step 1) BUILD

from the base directory (where this file is located) run

make build

this will compile and link libRbt and rDock binaries.

Step 2) TEST

NOTE: this step is not mandatory, but it is highly recommended.
the tests ar run by

make test

If the tests succeed rDock building has finished successfully.

Otherwise, please check your dependencies and all the previous commands or go to 
Support Section in the webpage (http://rdock.sourceforge.net) to ask for help.

Step 3) INSTALL

You can either run rDock directly from the build location, or 
install the binaries and data files to a new location.

in order to install in other location run:

export PREFIX=<path to the destination folder>
make install

or (for a more compact notation)
PREFIX=<path> make install

for example:

export PREFIX=/opt/rdock
make install

will create and populate /opt/rdock/lib /opt/rdock/bin and /opt/rdock/data

Step 4) Run rDock

rDock requires several environment variables to be set.
First, RBT_ROOT, which must point to the installation directory
Second, libRbt.so file must be accessible, either by having it registered
by ld or by prepending $RBT_ROOT/lib to LD_LIBRARY_PATH variable
Third and last (this is 'optional'), rDock binaries should be accessible
from PATH, which can be done by prepending $RBT_ROOT/bin to PATH variable.

this can be put in any profile file or an environment module:

export RBT_ROOT=/path/to/rDock/installation/
export LD_LIBRARY_PATH=$RBT_ROOT/lib:$LD_LIBRARY_PATH
export PATH=$RBT_ROOT/bin:$PATH

########################################################################
ADVANCED BUILD INSTRUCTIONS:
########################################################################

The provided Makefile has a number of options and configurable variables
and flags to provide some flexibility and adaptability to building and
testing processes.

These are the configurable variables, with a brief explanation on how to
use them:

variable            Description
------------------------------------------------------------------------
MODE				RELEASE/DEBUG
                    RELEASE mode uses optimization flags,
                    DEBUG uses profiling flags. Default is RELEASE
PREFIX				Path where the build artifacts are to be installed
                    Default is ./build/<MODE>
CXX					C++ Compiler. Default is g++
LINKER				Linker. Default is g++
CXX_COMPILE_FLAGS	Additional compile flags for $CXX
                    Useful for cross-compilation or other specific
                    situations. Default is empty
CXX_WARNINGS		Additional warning flags for $CXX. Default is empty
DAYLIGHT			YES/NO
                    YES instructs this Makefile to compile daylight
                    library related functionalities and executables. If
                    flag is set to YES, one of the next must happen:
                        * daylight libraries and headers must be
                            directly accessible for compiler and linker
                            (i.e. registered by ld).
                        * daylight libraries and headers location must
                            be specified through the INCDIR and LIBDIR
                            variables (see below).
                    Default is NO.
INCDIR				Additional paths for compiler to look for headers.
                    Must be provided in the form of '-I<path>' to be
                    passed directly to the compiler. Default is empty.
LIBDIR				Additional paths for linker to lookk for libraries.
                    Must be provided in the form of '-L<path>' to be
                    passed directly to the linker. Defaults is empty.

these are the available targets in the Makefile, briefly explained:
Target              Description
------------------------------------------------------------------------
build				Builds the library and binaries. Default target.
build_lib			Builds the library.
build_exes			Builds the binaries.
                    It depends on build_lib
build_test			Builds the testing framework.
                    It depends on build_exes.
clean				Removes intermediate object files.
veryclean			Removes intermediate object files and all the built
                    artifacts (library, binaries and test framework).
rebuild				Same as veryclean + build
test				Runs the tests to check the results are correct.
                    Depends on build_test. Recomended
install				Copies bin/ lib/ and data/ to PREFIX folder
                    (./build/<MODE> by default)